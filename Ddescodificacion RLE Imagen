def descodificacionImagen(datosCodificados):
    datosDescodificados = bytearray()  # Se crea un objeto bytearray vacío para almacenar los datos decodificados.
    indice = 0  # Se inicializa el índice para iterar sobre los datos codificados.
    while indice < len(datosCodificados):  # Se inicia un bucle while para iterar sobre los datos codificados.
        longitud = datosCodificados[indice]  # Se obtiene la longitud de la corrida (número de repeticiones) del valor del píxel.
        valorPixel = datosCodificados[indice+1]  # Se obtiene el valor del píxel.
        datosDescodificados([valorPixel] * longitud)  # Se agrega el valor del píxel repetido según la longitud de la corrida al objeto bytearray decodificado.
        indice += 2  # Se incrementa el índice en 2 para saltar al siguiente par de longitud de corrida y valor del píxel.
    return datosDescodificados  # Se devuelve el objeto bytearray decodificado.

def imagen(data, width, height, output_file):
    from PIL import Image  # type: ignore # Se importa la clase Image de la biblioteca PIL.
    img = Image.frombytes('L', (width, height), bytes(data))  # Se crea una imagen a partir de los datos decodificados utilizando la clase Image.
    img.save(output_file)  # Se guarda la imagen en un archivo de salida especificado.

def decompress_rle(input_file, output_file):
    with open(input_file, 'rb') as f:  # Se abre el archivo codificado en modo de lectura binaria.
        encoded_data = bytearray(f.read())  # Se lee todo el contenido del archivo codificado y se almacena en un objeto bytearray.

    decoded_data = (encoded_data)  # Se decodifica los datos RLE.

    width = decoded_data[0] * 256 + decoded_data[1]  # Se calcula el ancho de la imagen a partir de los primeros dos bytes de los datos decodificados.
    height = decoded_data[2] * 256 + decoded_data[3]  # Se calcula la altura de la imagen a partir de los siguientes dos bytes de los datos decodificados.

    imagen(decoded_data[4:], width, height, output_file)  # Se guarda la imagen restaurada, ignorando los primeros 4 bytes que representan el ancho y la altura.
