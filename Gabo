def algoritmoLZW(pCadena):
    '''
    Entradas:
            - pCadena (str)
    
    Salidas:
            - salida (list)

    Restricciones:
            - No se válidan restricciones en la función
    '''

    # Incializar el tamaño del diccionario en 256 para almacenar el proximo caracter
    tamanoDiccionario = 256
    # Inicializar el diccionario con caracteres ASCII
    diccionario = {chr(a): a for a in range(tamanoDiccionario)}
    salida = [] # Lista para almacenar el codigo comprimido
    indice = 0 
    # Cadena vacía para constuir combinaciones
    secuenciaActual = ""
    while(indice < len(pCadena)):
        caracter = pCadena[indice]
        secuenciaExtendida = secuenciaActual + caracter
        if(secuenciaExtendida in diccionario):
            secuenciaActual = secuenciaExtendida
        else:
            
            salida.append(diccionario[secuenciaActual])
            diccionario[secuenciaExtendida] = tamanoDiccionario
            tamanoDiccionario += 1
            secuenciaActual = caracter
        indice = indice + 1
    # Agregar con append los codigos a la variable salida
    salida.append(diccionario[secuenciaActual])
    return salida


def descompresionAlgoritmoLZW(pComprimido):
    '''
    Entradas:
            - pComprimido (list)

    Salidas:
            - Cadena de datos descomprimidos a partir de la lista de entrada

    Restricciones:
            - No se válidan restricciones en la función
    '''
    # Inicializar el diccionario de descompresión con caracteres ASCII estándar
    tamanoDiccionario = 256
    diccionario = {a: chr(a) for a in range(tamanoDiccionario)}
      # Obtener el primer caracter de la secuencia comprimida y convertirlo a ASCII
    secuenciaPrevia = chr(pComprimido.pop(0))
    cadenaRespuesta = []
    cadenaRespuesta.append(secuenciaPrevia)

    for elemento in pComprimido:
        secuencia = ""
        if(elemento in diccionario):
            secuencia = diccionario[elemento]
        elif(elemento == tamanoDiccionario):
            secuencia = secuenciaPrevia + secuenciaPrevia[0]

        cadenaRespuesta.append(secuencia)

        diccionario[tamanoDiccionario] = secuenciaPrevia + secuencia[0]
        tamanoDiccionario = tamanoDiccionario + 1

        secuenciaPrevia = secuencia
    # Conviernte la lista en una cadena y lo devuelve
    return "".join(cadenaRespuesta)


'''
Funciones utilizadas para este codigo de compresion/descompresion son: append/pop/chr/len/join
'''
