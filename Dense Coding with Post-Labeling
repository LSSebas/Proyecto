# Importar el módulo re para trabajar con expresiones regulares
import re


# Inicio Codificación densa post etiquetado
# Se desarrollan diferentes funciones según el paso a paso eplicado en el documento
def identificarSecuenciasRepetidas(pTextoEntrada):
    """
    Identifica las palabras únicas y repetidas en el texto.

    Entradas:
            - pTextoEntrada (str)

    Salidas:
            - palabrasRepetidas (list)

    Restricciones:
            - La función no válida restricciones
    """
    # Dividir el texto en palabras y caracteres de puntuación usando expresiones regulares
    # re.findall busca todas las coincidencias en una cadena y las devuelve en una lista
    # r"\w+|\W" patron de busqueda propio de findall ((\w+ busca secuencias de alfanumericos) (| indica o) (W busca carcateres no alfanumericos individuales))
    # r indica que la cadena va a ser tratada como una cadena raw (trabajo con epresiones regulares)
    palabras = re.findall(r"\w+|\W", pTextoEntrada)

    # Identificar palabras únicas y repetidas
    palabrasUnicas = set()  # Conjunto para almacenar palabras únicas (set() almacena en un conjunto una lista de no repetidos)
    palabrasRepetidas = []  # Lista para almacenar palabras repetidas

    for palabra in palabras:
        if(palabra.strip() and palabra.isalpha()):
            # Verificar si la palabra es un alfanumérico y no está vacío después de eliminar espacios en blanco
            if palabra in palabrasUnicas:
                # Si la palabra ya está en palabrasUnicas, significa que es repetida
                if palabra not in palabrasRepetidas:
                    # Si la palabra repetida no está en la lista de palabras repetidas, añádela
                    palabrasRepetidas.append(palabra)
            else:
                # Si la palabra no está en ¿palabrasUnicas, añádela al conjunto palabrasRepetidas
                palabrasUnicas.add(palabra)

    return palabrasRepetidas


def construirDiccionarioInicial(pPalabrasRepetidas):
    """
    Construye un diccionario inicial asignando códigos numéricos a las palabras repetidas.

    Entradas:
            - pPalabrasRepetidas (list)

    Salidas:
            - diccionario (dict): diccionario con las palabras repetidas y sus codigos asignados

    Restricciones:
            - La función no válida restricciones
    """
    diccionario = {}
    codigo = 1  # Iniciar los códigos desde 1

    for palabra in pPalabrasRepetidas:
        diccionario[palabra] = (codigo)  # Asignar el código actual a la palabra en el diccionario
        codigo += 1  # Incrementar el código para la próxima palabra repetida

    return diccionario


def aplicarDiccionario(pTextoEntrada, pDiccionario):
    """
    Aplica codificación densa al texto de entrada según un diccionario dado.

    Entradas:
            - pTextoEntrada (str)
            - pDiccionario (dict)

    Salidas:
            - Cadena de texto codificada 

    Restricciones:
            - La función no válida restricciones
    """
    # Obtener una lista de palabras y caracteres de puntuación del texto
    palabras = re.findall(r"\w+|\W", pTextoEntrada)

    # Inicializar una lista vacía para almacenar el texto codificado
    textoCodificado = []

    # Iterar sobre cada elemento en la lista de palabras
    for elemento in palabras:
        # Verificar si el elemento es una palabra válida (sin espacios y solo letras)
        if (elemento.strip() and elemento.isalpha()):
            # Reemplazar la palabra por su código si está presente en el diccionario
            if elemento in pDiccionario:
                textoCodificado.append(str(pDiccionario[elemento]))  # Agregar el código al texto codificado
            else:
                textoCodificado.append(elemento)  # Mantener la palabra original si no está en el diccionario
        else:
            textoCodificado.append(elemento)  # Mantener caracteres de puntuación y espacios sin cambios en el texto codificado

    # Unir la lista de elementos codificados en una cadena usando espacios como separadores
    return " ".join(textoCodificado)  # Devolver el texto codificado como una cadena


def aplicarPostEtiquetado(pTextoEntrada, pDiccionario):
    """
    Aplica post-etiquetado al texto de entrada para actualizar un diccionario dado.

    Entradas:
            - pTextoEntrada (str)
            - pDiccionario (dict): Diccionario por actualizar

    Salidas:
            - diccionario (dict): Diccionario actualizado
            - codigoOrdenado (str): codigo en orden de aparición

    Restricciones:
            - La función no válida restricciones
    """
    # Obtener todos los elementos del texto de entrada respetando la distinción entre mayúsculas y minúsculas
    elementos = re.findall(r"\w+|\W", pTextoEntrada)

    # Filtrar elementos que no están en el diccionario y actualizar el diccionario manteniendo el orden de aparición
    codigo = (max(pDiccionario.values(), default=0) + 1)  # Obtener el próximo código disponible
    for elemento in elementos:
        if (elemento.strip() and elemento not in pDiccionario):
            # Asignar el próximo código disponible al elemento y luego incrementar el contador
            pDiccionario[elemento] = codigo
            codigo += 1

    # Crear una lista de códigos en el orden de aparición en el texto original
    codigoOrdenado = [pDiccionario[elemento] for elemento in elementos if elemento.strip() and elemento in pDiccionario]

    return pDiccionario, codigoOrdenado


def aplicarEtiquetas(pTextoEntrada, pDiccionario):
    """
    Formatea el diccionario como una cadena dentro de etiquetas <dic>...</dic>.

    Entradas:
            - pTextoEntrada (str)
            - pDiccionarios (dict)

    Salidas:
            - Cadena XML de palabras con su respectivos codigos 

    Restricciones:
            - La función no válida restricciones
    """
    # Obtener todos los elementos del texto de entrada respetando la distinción entre mayúsculas y minúsculas
    elementos = re.findall(r"\w+|\W", pTextoEntrada)

    # Filtrar elementos que están en el diccionario y mantener el orden de aparición
    elementosOrdenados = [elemento for elemento in elementos if elemento.strip() and elemento in pDiccionario]

    # Crear una lista de pares clave:valor en el formato "clave:valor" siguiendo el orden de aparición
    pares = [f"{key}:{pDiccionario[key]}" for key in elementosOrdenados]

    # Unir los elementos de la lista en una cadena y agregar las etiquetas <dic>...</dic>
    return f"<dic>{' '.join(pares)}</dic>"


def comprimirTextoPostEtiquetado(pCadena):
    """
    Comprime texto usando el algoritmo de codificación densa post-etiquetado.

    Entradas: 
            - pCadena (str)

    Salidas:
            - Cadena XML de palabras con su codigo respectivo
            - Codigo del texto en orden de aparición
        
    Restricciones:
            - La función no válida restricciones
    """
    textoEntrada = pCadena
    palabrasRepetidas = identificarSecuenciasRepetidas(textoEntrada)
    if (palabrasRepetidas):
        print(f"Se identifican varias palabras repetidas: {', '.join(palabrasRepetidas)}")

        # Construir el diccionario inicial
        diccionarioInicial = construirDiccionarioInicial(palabrasRepetidas)
        print("Diccionario inicial:")
        print(diccionarioInicial)

        # Aplicar codificación densa al texto de entrada
        textoCodificado = aplicarDiccionario(textoEntrada, diccionarioInicial)
        print("Texto codificado densamente:")
        print(textoCodificado)

        # Aplicar post-etiquetado al texto de entrada
        diccionarioActualizado, codigoEnOrden = aplicarPostEtiquetado(textoEntrada, diccionarioInicial)

        # Formatear el diccionario como una cadena dentro de etiquetas <dic>...</dic>
        diccionarioConEtiquetas = aplicarEtiquetas(textoEntrada, diccionarioActualizado)
        print("Diccionario actualizado con post-etiquetado:")
        print(diccionarioConEtiquetas)

        # Imprimir los códigos en el orden de aparición en el texto original
        print("\nCódigos en el orden de aparición en el texto original:")
        print(codigoEnOrden)

        resultado = f"{diccionarioConEtiquetas}\n{codigoEnOrden}"
        return resultado
    else:
        print("No se encontraron palabras repetidas en el texto.")

# Función para descomprimir texto usando el algoritmo de texto por codificación densa con post-etiquetado
def descomprimirTextoPostEtiquetado(pTextoCodificado):
    """
    Extrae las palabras del contenido XML en el formato <dic>...</dic> y devuelve un texto descomprimido en el orden correcto.

    Entradas: 
            - pTextoCodificado (str)
    
    Salidas:
            - Texto descomprimido como una cadena

    Restricciones:
            - La función no válida restricciones
    """
    # Utilizar una expresión regular para encontrar las palabras y códigos dentro del contenido XML
    # "/d+" busca si coincide con uno o mas digitos
    patron = r"(\w+|\W+):(\d+)"
    coincidencias = re.findall(patron, pTextoCodificado)

    # Diccionario para mapear códigos a palabras
    codigoPalabras = {}
    # Lista para almacenar las palabras en el orden original
    palabrasEnOrden = []

    # Construir un diccionario de palabras y códigos
    for palabra, codigo in coincidencias:
        # Convertir el código a un entero
        codigo = int(codigo)
        # Agregar la palabra al diccionario si no existe
        if codigo not in codigoPalabras:
            palabrasEnOrden.append(palabra)

    # Devolver el texto descomprimido como una cadena
    return " ".join(palabrasEnOrden)
